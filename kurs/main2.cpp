#include <iostream>
using namespace std;

const int MAXN = 100005; // Максимальный размер массива
int segtree[4*MAXN]; // Объявление массива для построения сегментного дерева

void build(int arr[], int v, int tl, int tr) {
    if (tl == tr) { // Если левая и правая границы совпадают
        segtree[v] = arr[tl]; // Присваиваем значению в узле сегментного дерева значение из массива
    } else {
        int tm = (tl + tr) / 2; // Находим середину отрезка
        build(arr, v*2, tl, tm); // Рекурсивно строим левое поддерево
        build(arr, v*2+1, tm+1, tr); // Рекурсивно строим правое поддерево
        segtree[v] = segtree[v*2] + segtree[v*2+1]; // Записываем в узел сумму значений левого и правого поддеревьев
    }
}

int sum(int v, int tl, int tr, int l, int r) {
    if (l > r) // Если левая граница больше правой
        return 0; // Возвращаем 0
    if (l == tl && r == tr) // Если запрашиваемый отрезок совпадает с текущим отрезком
        return segtree[v]; // Возвращаем значение в узле сегментного дерева
    int tm = (tl + tr) / 2; // Находим середину отрезка
    return sum(v*2, tl, tm, l, min(r, tm)) // Рекурсивно ищем сумму в левом поддереве
           + sum(v*2+1, tm+1, tr, max(l, tm+1), r); // Рекурсивно ищем сумму в правом поддереве
}

void update(int v, int tl, int tr, int pos, int new_val) {
    if (tl == tr) { // Если левая и правая границы совпадают
        segtree[v] = new_val; // Обновляем значение в узле сегментного дерева
    } else {
        int tm = (tl + tr) / 2; // Находим середину отрезка
        if (pos <= tm) // Если позиция находится в левом поддереве
            update(v*2, tl, tm, pos, new_val); // Рекурсивно обновляем значение в левом поддереве
        else
            update(v*2+1, tm+1, tr, pos, new_val); // Рекурсивно обновляем значение в правом поддереве
        segtree[v] = segtree[v*2] + segtree[v*2+1]; // Обновляем значение в узле как сумму значений левого и правого поддеревьев
    }
}

int main() {
    int n;
    cin >> n; // Вводим размер массива
    int arr[n]; // Объявляем массив
    for (int i = 0; i < n; i++) {
        cin >> arr[i]; // Вводим элементы массива
    }
    build(arr, 1, 0, n-1); // Строим сегментное дерево
    // Теперь можно использовать функции sum и update для выполнения запросов на отрезках и обновления значений в сегментном дереве
    return 0;
}
